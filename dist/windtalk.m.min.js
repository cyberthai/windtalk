let _target,remoteWindow,isAttached;const callbacks={},reducePath=a=>a.reduce((a,b)=>a?a[b]:a,_target);async function messageHandler(a){const b=a.data;let c,d,e;if(c=b&&b.id)if((d=b.type)&&remoteWindow&&_target){b.path=b.path||[];const a={id:c},e=reducePath(b.path),f=reducePath(b.path.slice(0,-1));switch(d){case"G":a.value=e;break;case"S":const c=b.path.length&&b.path.pop();c&&(f[c]=b.value);break;case"A":try{a.value=await e.apply(f,b.args||[])}catch(b){a.error=b.toString()}}remoteWindow.postMessage(a,"*")}else(e=callbacks[c])&&(delete callbacks[c],b.error?e[1](new Error(b.error)):e[0](b.value))}function attach(){isAttached||(self.addEventListener("message",messageHandler),isAttached=!0)}function createRemote(a){const b=`${Date.now()}-${Math.floor(Math.random()*Number.MAX_SAFE_INTEGER)}`;let d=0;return attach(),c=>{const e=c.args||[],f=`${b}-${++d}`;return new Promise((b,d)=>{callbacks[f]=[b,d],a.postMessage(Object.assign({},c,{id:f,args:e}),"*")})}}function proxy(a,b){return b=b||[],new Proxy(function(){},{get(c,d,e){if("then"===d){if(0===b.length)return{then:()=>e};const c=a({type:"G",path:b});return c.then.bind(c)}return proxy(a,b.concat(d))},set(c,d,e){return a({type:"S",path:b.concat(d),value:e})},apply(c,d,e){return a({type:"A",path:b,args:e})}})}function link(a){return proxy(createRemote(a))}function expose(a,b){remoteWindow=b||window.top,_target=a,attach()}export{link,expose};
