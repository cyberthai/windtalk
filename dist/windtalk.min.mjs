let _target,_remoteWindow,_callbacks,_attached;const _reduce=a=>a.reduce((a,b)=>a?a[b]:a,_target);async function _handler(a){const b=a.data;let c,d,e;if(c=b&&b.id)if((d=b.type)&&_remoteWindow&&_target){b.path=b.path||[];const a={id:c},e=_reduce(b.path),f=_reduce(b.path.slice(0,-1));switch(d){case"GET":a.value=e;break;case"SET":const c=b.path.length&&b.path[b.path.length-1];c&&(f[c]=b.value);break;case"APPLY":try{a.value=await e.apply(f,b.args||[])}catch(b){a.error=b.toString()}}_remoteWindow.postMessage(a,"*")}else _callbacks&&(e=_callbacks[c])&&(delete _callbacks[c],b.error?e[1](new Error(b.error)):e[0](b.value))}function _attach(){_attached||(self.addEventListener("message",_handler),_attached=!0)}function createRmote(a){const b=`${Date.now()}-${Math.floor(Math.random()*Number.MAX_SAFE_INTEGER)}`;let d=0;return _attach(),c=>{const e=c.args||[],f=`${b}-${++d}`;return new Promise((b,d)=>{_callbacks[f]=[b,d],a.postMessage(Object.assign({},c,{id:f,args:e}),"*")})}}function proxy(a,b){return b=b||[],new Proxy(function(){},{get(c,d,e){if("then"===d){if(0===b.length)return{then:()=>e};const c=a({type:"GET",path:b});return c.then.bind(c)}return proxy(a,b.concat(d))},set(c,d,e){return a({type:"SET",path:b.concat(d),value:e})},apply(c,d,e){return a({type:"APPLY",path:b,args:e})}})}function link(a){return _callbacks={},proxy(createRmote(a))}function expose(a,b){_remoteWindow=b||window.top,_target=a,_attach()}export{link,expose};
